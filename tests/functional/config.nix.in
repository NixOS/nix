let
  contentAddressedByDefault = builtins.getEnv "NIX_TESTS_CA_BY_DEFAULT" == "1";
  caArgs = if contentAddressedByDefault then {
    __contentAddressed = true;
    outputHashMode = "recursive";
    outputHashAlgo = "sha256";
  } else {};
in

rec {
  shell = "@bash@";

  path = "@coreutils@";

  system = "@system@";

  shared = builtins.getEnv "_NIX_TEST_SHARED";

  mkDerivation = args: let

    drv = derivation ({
      inherit system;
      builder = shell;
      args = ["-e" args.builder or (builtins.toFile "builder-${args.name}.sh" ''
        if [ -e "$NIX_ATTRS_SH_FILE" ]; then source $NIX_ATTRS_SH_FILE; fi;
        eval "$buildCommand"
      '')];
      PATH = path;
    } // caArgs // removeAttrs args ["builder" "meta"]);

    fixUp = value: value // outputsMap // {
      # Not unsafe, and we will add back if we need it.
      # Nixpkgs should do this too, when `addDrvOutputDependencies` makes it into the NixOS stable release.
      drvPath = (builtins.unsafeDiscardOutputDependency value.drvPath);
    };

    outputsMap = builtins.listToAttrs (map
      (name: {
        inherit name;
        value = fixUp drv.${name};
      })
      (drv.outputs or []));

  in fixUp drv // {
    meta = args.meta or {};
  };
}
