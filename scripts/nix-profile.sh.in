if [ -n "$HOME" ] && [ -n "$USER" ]; then
    # __safe: if it is safe to "activate" Nix. 0 is safe, 1 is unsafe
    __safe=0
    __savedpath="$PATH"
    export PATH=@coreutils@

    # Set up the per-user profile.
    # This part should be kept in sync with nixpkgs:nixos/modules/programs/shell.nix

    NIX_LINK=$HOME/.nix-profile

    NIX_USER_PROFILE_DIR=@localstatedir@/nix/profiles/per-user/$USER

    mkdir -m 0755 -p "$NIX_USER_PROFILE_DIR"

    if [ "$(stat --printf '%u' "$NIX_USER_PROFILE_DIR")" != "$(id -u)" ]; then
        echo "Nix: WARNING: bad ownership on '$NIX_USER_PROFILE_DIR', should be $(id -u)," >&2
        echo "              please delete '$NIX_USER_PROFILE_DIR'. The current ownership" >&2
        echo "              allows other users to install software for you." >&2
        __safe=1
    fi

    if [ -w "$HOME" ]; then
        if ! [ -L "$NIX_LINK" ]; then
            echo "Nix: creating '$NIX_LINK'" >&2
            if [ "$USER" != root ]; then
                if ! ln -s "$NIX_USER_PROFILE_DIR"/profile "$NIX_LINK"; then
                    echo "Nix: WARNING: could not link '$NIX_LINK' to '$NIX_USER_PROFILE_DIR/profile'" >&2
                fi
            else
                # Root installs in the system-wide profile by default.
                # nix/profiles is not writable by arbitrary users
                ln -s @localstatedir@/nix/profiles/default "$NIX_LINK"
            fi
        fi

        # Subscribe the user to the unstable Nixpkgs channel by default.
        if [ ! -e "$HOME/.nix-channels" ]; then
            echo "https://nixos.org/channels/nixpkgs-unstable nixpkgs" > "$HOME/.nix-channels"
        fi

        # Create the per-user garbage collector roots directory.
        __user_gcroots=@localstatedir@/nix/gcroots/per-user/"$USER"
        mkdir -m 0755 -p "$__user_gcroots"
        if [ "$(stat --printf '%u' "$__user_gcroots")" != "$(id -u)" ]; then
            echo "Nix: WARNING: bad ownership on '$__user_gcroots', should be $(id -u)," >&2
            echo "              please delete '$__user_gcroots'." >&2
        fi
        unset __user_gcroots

        # Set up a default Nix expression from which to install stuff.
        __nix_defexpr="$HOME"/.nix-defexpr
        [ -L "$__nix_defexpr" ] && rm -f "$__nix_defexpr"
        mkdir -m 0755 -p "$__nix_defexpr"
        if [ -d @localstatedir@/nix/profiles/per-user/root ]; then
            if [ "$(stat --printf '%u' @localstatedir@/nix/profiles/per-user/root)" -eq 0 ]; then
                if [ "$USER" != root ] && [ ! -L "$__nix_defexpr"/channels_root ]; then
                    if [ -d @localstatedir@/nix/profiles/per-user/root ]; then
                        ln -s @localstatedir@/nix/profiles/per-user/root/channels "$__nix_defexpr"/channels_root
                    fi
                fi
            else
                echo "Nix: WARNING: bad ownership on '@localstatedir@/nix/profiles/per-user/root':"
                echo "              the root user should own it."
            fi
        fi

        unset __nix_defexpr
    fi

    if [ "$__safe" -eq 1 ]; then
        echo "Nix: WARNING: Not activating due to the above warnings." >&2
    else
        # Append ~/.nix-defexpr/channels to $NIX_PATH so that <nixpkgs>
        # paths work when the user has fetched the Nixpkgs channel.
        export NIX_PATH=${NIX_PATH:+$NIX_PATH:}$HOME/.nix-defexpr/channels

        # Set up environment.
        # This part should be kept in sync with nixpkgs:nixos/modules/programs/environment.nix
        export NIX_PROFILES="@localstatedir@/nix/profiles/default $HOME/.nix-profile"

        # Set $NIX_SSL_CERT_FILE so that Nixpkgs applications like curl work.
        if [ -e /etc/ssl/certs/ca-certificates.crt ]; then # NixOS, Ubuntu, Debian, Gentoo, Arch
            export NIX_SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt
        elif [ -e /etc/ssl/ca-bundle.pem ]; then # openSUSE Tumbleweed
            export NIX_SSL_CERT_FILE=/etc/ssl/ca-bundle.pem
        elif [ -e /etc/ssl/certs/ca-bundle.crt ]; then # Old NixOS
            export NIX_SSL_CERT_FILE=/etc/ssl/certs/ca-bundle.crt
        elif [ -e /etc/pki/tls/certs/ca-bundle.crt ]; then # Fedora, CentOS
            export NIX_SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.crt
        elif [ -e "$NIX_LINK/etc/ssl/certs/ca-bundle.crt" ]; then # fall back to cacert in Nix profile
            export NIX_SSL_CERT_FILE="$NIX_LINK/etc/ssl/certs/ca-bundle.crt"
        elif [ -e "$NIX_LINK/etc/ca-bundle.crt" ]; then # old cacert in Nix profile
            export NIX_SSL_CERT_FILE="$NIX_LINK/etc/ca-bundle.crt"
        fi

        if [ -n "${MANPATH-}" ]; then
            export MANPATH="$NIX_LINK/share/man:$MANPATH"
        fi

        export PATH="$NIX_LINK/bin:$__savedpath"
    fi
    unset __safe __savedpath NIX_LINK NIX_USER_PROFILE_DIR
fi
