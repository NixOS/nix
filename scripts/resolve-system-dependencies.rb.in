#! @ruby@

require 'yaml'
require 'pathname'
require 'set'

deps = open(ARGV[0]).read.scan(/\("__impureHostDeps","(.*?)"\)/).flatten.map{|x|x.split}[0]

def untbd(x)
  Pathname.new(YAML.load(open(x))['install-name'])
end

def absolute_readlink(x)
  l = x.readlink
  return x.dirname.join(l) if l.relative?
  l
end

def cache_path(x)
  File.join(File.dirname(__FILE__), "cache", x.to_s.gsub("/", "%"))
end

def get_path(x, deps = {})
  orig_x = x
  if File.exists?(cache_path(orig_x))
    return Marshal.load(open(cache_path(orig_x)))
  end

  path = Set.new([x])
  while x.symlink?
    x = absolute_readlink(x)
    path.add(x)
  end

  if x.extname == ".tbd"
    x = untbd(x)
    path.add(x)
  end

  path += resolve_tree(x, deps)

  Marshal.dump(path, open(cache_path(orig_x), "w"))

  return path
end

def resolve_tree(lib, deps)
  results = Set.new
  return results if deps.has_key?(lib)
  deps[lib] = true
  # drop header line and self
  oto = %x{otool -L #{lib}}
  if $?.success? && oto !~ /is not an object file/
    stuff = oto.split(/\n/)[2..-1]
    if stuff
      stuff.each do |libline|
        libpath = libline.split("(")[0].strip
        results.add(Pathname.new(libpath))
        results += resolve_tree(libpath, deps)
      end
    end
  end

  results
end

all_paths = Set.new

exit if deps.nil?

deps.each do |fuck|
  all_paths += get_path(Pathname.new(fuck))
end

puts "extra-chroot-dirs"
puts all_paths.to_a.join("\n") if all_paths.length > 0
puts
