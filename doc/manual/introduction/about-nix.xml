<chapter xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      version="5.0"
      xml:id="ch-about-nix">

<title>About Nix</title>

<para>Nix is a package manager, and it's <emphasis>purely functional</emphasis>: packages built with Nix:</para>

<itemizedlist>

  <listitem><para>don’t have side-effects</para></listitem>

  <listitem><para>never change after they have
been built</para></listitem>

</itemizedlist>

<para>Nix stores packages in the Nix store (usually the directory <filename>/nix/store</filename>), and each package has its own <emphasis>unique subdirectory</emphasis>, something like <filename>/nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/</filename>.</para>


<simplesect><title>Use multiple versions of a package</title>

<para>The Nix store lets you have multiple versions or variants of a package installed at the same time. This avoids "DLL hell": different applications can depend on different versions of the same package, and they won't interfere with each other, because they're in different paths.</para>

<para>Upgrading or uninstalling an application can't break other applications, because that never “destructively” updates or deletes files used by other packages.</para>

</simplesect>


<simplesect><title>Complete dependencies</title>

<para>Nix helps make sure that package dependency specifications are complete. It doesn't install packages in “global” locations like <filename>/usr/bin</filename>, only in package-specific directories, and tools such as compilers don’t search in per-packages directories such as <filename>/nix/store/5lbfaxb722zp…-openssl-0.9.8d/include</filename>. So if a package builds correctly on your system, this is because you specified the dependency explicitly.</para>

</simplesect>

<simplesect><title>Multi-user support</title>

<para>Nix has multi-user support, letting non-privileged
users can securely install software.</para>

TODO link to relevant section.

</simplesect>

<simplesect><title>Atomic upgrades and rollbacks</title>

<para>Package management operations are <emphasis>atomic</emphasis>: they never overwrite packages in the Nix store, but only add new versions in different paths.</para>

<para>This means:</para>

<itemizedlist>

  <listitem><para>during a package upgrade, there's no time window in which a package has some files from the old version and some files from the new version</para></listitem>

  <listitem><para>the old versions are still there after an upgrade, so you can roll back</para></listitem>

</itemizedlist>

<para>TODO link to rollback section.</para>

</simplesect>


<simplesect><title>Garbage collection</title>

<para>When you uninstall a package using <literal>nix-env --uninstall</literal>, the package isn’t deleted. When you're ready, you can delete all packages not in use (aka <emphasis>garbage collect</emphasis>) by running <literal>nix-collect-garbage</literal>.</para>

<para>TODO link to gc section.</para>

</simplesect>


<simplesect><title>Functional package language</title>

<para>Packages are built from <emphasis>Nix expressions</emphasis>, which describe everything that goes into a package build action. Nix expressions are, as far as possible, <emphasis>deterministic</emphasis>: building a Nix
expression twice should yield the same result.</para>

</simplesect>


<simplesect><title>Deploy from source or binary</title>

<para>When you install a package using <literal>nix-env --install</literal>, you can either:</para>

<itemizedlist>

  <listitem><para>install by building all the dependencies from source (unless they're already in the Nix store, in which case get them from there) which can take a long time</para></listitem>

  <listitem><para>get pre-built binaries from a binary cache (a web server that provides pre-built binaries), falling back to building from source if the binary isn't in the cache</para></listitem>

</itemizedlist>

</simplesect>

<simplesect><title>Nix Packages collection</title>

<para>The <emphasis>Nix Packages collection</emphasis> (Nixpkgs) is a large set of Nix expressions containing hundreds of existing Unix packages.</para>

</simplesect>


<simplesect><title>Managing build environments</title>

<para>You can automatically set up the build environment for a package. Use <literal>nix-shell</literal> to get the dependencies of your package (based on a Nix expression), then start a Bash shell in which all necessary environment variables (such as compiler search paths) are set.</para>

</simplesect>


<simplesect><title>Portability</title>

<para>Nix runs on Linux and macOS.</para>

</simplesect>

<simplesect><title>License</title>

<para>Nix is released under the terms of the <link
xlink:href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">GNU
LGPLv2.1 or (at your option) any later version</link>.</para>

</simplesect>


</chapter>
