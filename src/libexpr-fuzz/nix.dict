# AFL++ dictionary for Nix expression language
# This helps AFL++ generate more meaningful mutations

# Keywords
keyword_let="let"
keyword_in="in"
keyword_if="if"
keyword_then="then"
keyword_else="else"
keyword_with="with"
keyword_inherit="inherit"
keyword_rec="rec"
keyword_assert="assert"
keyword_or="or"
keyword_import="import"

# Literals
literal_null="null"
literal_true="true"
literal_false="false"

# Builtin prefix
builtin_prefix="builtins."

# Common builtins
builtin_add="builtins.add"
builtin_toString="builtins.toString"
builtin_typeOf="builtins.typeOf"
builtin_map="builtins.map"
builtin_filter="builtins.filter"
builtin_head="builtins.head"
builtin_tail="builtins.tail"
builtin_length="builtins.length"
builtin_foldl="builtins.foldl'"
builtin_elem="builtins.elem"
builtin_attrNames="builtins.attrNames"
builtin_attrValues="builtins.attrValues"
builtin_hasAttr="builtins.hasAttr"
builtin_getAttr="builtins.getAttr"
builtin_listToAttrs="builtins.listToAttrs"
builtin_catAttrs="builtins.catAttrs"
builtin_fetchurl="builtins.fetchurl"
builtin_fetchGit="builtins.fetchGit"
builtin_fetchTarball="builtins.fetchTarball"
builtin_derivation="builtins.derivation"
builtin_derivationStrict="builtins.derivationStrict"
builtin_toFile="builtins.toFile"
builtin_toPath="builtins.toPath"
builtin_fromJSON="builtins.fromJSON"
builtin_toJSON="builtins.toJSON"
builtin_readFile="builtins.readFile"
builtin_readDir="builtins.readDir"
builtin_pathExists="builtins.pathExists"
builtin_match="builtins.match"
builtin_split="builtins.split"
builtin_substring="builtins.substring"
builtin_stringLength="builtins.stringLength"
builtin_replaceStrings="builtins.replaceStrings"
builtin_concatStrings="builtins.concatStrings"
builtin_concatStringsSep="builtins.concatStringsSep"
builtin_parseDrvName="builtins.parseDrvName"
builtin_compareVersions="builtins.compareVersions"
builtin_throw="builtins.throw"
builtin_abort="builtins.abort"
builtin_trace="builtins.trace"
builtin_seq="builtins.seq"
builtin_deepSeq="builtins.deepSeq"
builtin_isNull="builtins.isNull"
builtin_isBool="builtins.isBool"
builtin_isInt="builtins.isInt"
builtin_isFloat="builtins.isFloat"
builtin_isString="builtins.isString"
builtin_isList="builtins.isList"
builtin_isAttrs="builtins.isAttrs"
builtin_isFunction="builtins.isFunction"
builtin_isPath="builtins.isPath"

# Operators
op_add="+"
op_sub="-"
op_mul="*"
op_div="/"
op_concat="++"
op_update="//"
op_eq="=="
op_neq="!="
op_lt="<"
op_gt=">"
op_lte="<="
op_gte=">="
op_and="&&"
op_or="||"
op_implication="->"
op_not="!"
op_hasattr="?"

# Delimiters
delim_open_brace="{"
delim_close_brace="}"
delim_open_bracket="["
delim_close_bracket="]"
delim_open_paren="("
delim_close_paren=")"
delim_semicolon=";"
delim_colon=":"
delim_at="@"
delim_ellipsis="..."
delim_dollar="${"
delim_quote="\""

# String interpolation
interp_start="${"
interp_end="}"
interp_example="${toString 42}"

# Multiline strings
multiline_start="''"
multiline_end="''"

# Common attribute names
attr_name="name"
attr_version="version"
attr_src="src"
attr_buildInputs="buildInputs"
attr_nativeBuildInputs="nativeBuildInputs"
attr_meta="meta"
attr_description="description"
attr_license="license"
attr_maintainers="maintainers"
attr_platforms="platforms"
attr_stdenv="stdenv"
attr_lib="lib"
attr_pkgs="pkgs"
attr_system="system"
attr_outputs="outputs"
attr_pname="pname"

# Path-like strings
path_root="/"
path_nix_store="/nix/store"
path_home="~/"
path_current="./"
path_parent="../"

# Common numbers
num_zero="0"
num_one="1"
num_negone="-1"
num_fortytwo="42"

# Lambda patterns
lambda_simple="x: x"
lambda_pattern="{x, y}: x"
lambda_default="{x ? 1}: x"
lambda_ellipsis="{x, ...}: x"
lambda_at="args@{x}: args"

# Let expressions
let_simple="let x = 1; in x"
let_multiple="let x = 1; y = 2; in x + y"

# Common idioms
idiom_mkDerivation="stdenv.mkDerivation"
idiom_callPackage="callPackage"
idiom_override=".override"
idiom_overrideAttrs=".overrideAttrs"
idiom_lib_optional="lib.optional"
idiom_lib_optionals="lib.optionals"
idiom_lib_mkIf="lib.mkIf"
idiom_lib_mkOption="lib.mkOption"
